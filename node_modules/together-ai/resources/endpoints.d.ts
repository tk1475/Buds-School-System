import { APIResource } from "../resource.js";
import * as Core from "../core.js";
export declare class Endpoints extends APIResource {
    /**
     * Creates a new dedicated endpoint for serving models. The endpoint will
     * automatically start after creation. You can deploy any supported model on
     * hardware configurations that meet the model's requirements.
     */
    create(body: EndpointCreateParams, options?: Core.RequestOptions): Core.APIPromise<EndpointCreateResponse>;
    /**
     * Retrieves details about a specific endpoint, including its current state,
     * configuration, and scaling settings.
     */
    retrieve(endpointId: string, options?: Core.RequestOptions): Core.APIPromise<EndpointRetrieveResponse>;
    /**
     * Updates an existing endpoint's configuration. You can modify the display name,
     * autoscaling settings, or change the endpoint's state (start/stop).
     */
    update(endpointId: string, body: EndpointUpdateParams, options?: Core.RequestOptions): Core.APIPromise<EndpointUpdateResponse>;
    /**
     * Returns a list of all endpoints associated with your account. You can filter the
     * results by type (dedicated or serverless).
     */
    list(query?: EndpointListParams, options?: Core.RequestOptions): Core.APIPromise<EndpointListResponse>;
    list(options?: Core.RequestOptions): Core.APIPromise<EndpointListResponse>;
    /**
     * Permanently deletes an endpoint. This action cannot be undone.
     */
    delete(endpointId: string, options?: Core.RequestOptions): Core.APIPromise<void>;
}
/**
 * Details about a dedicated endpoint deployment
 */
export interface EndpointCreateResponse {
    /**
     * Unique identifier for the endpoint
     */
    id: string;
    /**
     * Configuration for automatic scaling of the endpoint
     */
    autoscaling: EndpointCreateResponse.Autoscaling;
    /**
     * Timestamp when the endpoint was created
     */
    created_at: string;
    /**
     * Human-readable name for the endpoint
     */
    display_name: string;
    /**
     * The hardware configuration used for this endpoint
     */
    hardware: string;
    /**
     * The model deployed on this endpoint
     */
    model: string;
    /**
     * System name for the endpoint
     */
    name: string;
    /**
     * The type of object
     */
    object: 'endpoint';
    /**
     * The owner of this endpoint
     */
    owner: string;
    /**
     * Current state of the endpoint
     */
    state: 'PENDING' | 'STARTING' | 'STARTED' | 'STOPPING' | 'STOPPED' | 'ERROR';
    /**
     * The type of endpoint
     */
    type: 'dedicated';
}
export declare namespace EndpointCreateResponse {
    /**
     * Configuration for automatic scaling of the endpoint
     */
    interface Autoscaling {
        /**
         * The maximum number of replicas to scale up to under load
         */
        max_replicas: number;
        /**
         * The minimum number of replicas to maintain, even when there is no load
         */
        min_replicas: number;
    }
}
/**
 * Details about a dedicated endpoint deployment
 */
export interface EndpointRetrieveResponse {
    /**
     * Unique identifier for the endpoint
     */
    id: string;
    /**
     * Configuration for automatic scaling of the endpoint
     */
    autoscaling: EndpointRetrieveResponse.Autoscaling;
    /**
     * Timestamp when the endpoint was created
     */
    created_at: string;
    /**
     * Human-readable name for the endpoint
     */
    display_name: string;
    /**
     * The hardware configuration used for this endpoint
     */
    hardware: string;
    /**
     * The model deployed on this endpoint
     */
    model: string;
    /**
     * System name for the endpoint
     */
    name: string;
    /**
     * The type of object
     */
    object: 'endpoint';
    /**
     * The owner of this endpoint
     */
    owner: string;
    /**
     * Current state of the endpoint
     */
    state: 'PENDING' | 'STARTING' | 'STARTED' | 'STOPPING' | 'STOPPED' | 'ERROR';
    /**
     * The type of endpoint
     */
    type: 'dedicated';
}
export declare namespace EndpointRetrieveResponse {
    /**
     * Configuration for automatic scaling of the endpoint
     */
    interface Autoscaling {
        /**
         * The maximum number of replicas to scale up to under load
         */
        max_replicas: number;
        /**
         * The minimum number of replicas to maintain, even when there is no load
         */
        min_replicas: number;
    }
}
/**
 * Details about a dedicated endpoint deployment
 */
export interface EndpointUpdateResponse {
    /**
     * Unique identifier for the endpoint
     */
    id: string;
    /**
     * Configuration for automatic scaling of the endpoint
     */
    autoscaling: EndpointUpdateResponse.Autoscaling;
    /**
     * Timestamp when the endpoint was created
     */
    created_at: string;
    /**
     * Human-readable name for the endpoint
     */
    display_name: string;
    /**
     * The hardware configuration used for this endpoint
     */
    hardware: string;
    /**
     * The model deployed on this endpoint
     */
    model: string;
    /**
     * System name for the endpoint
     */
    name: string;
    /**
     * The type of object
     */
    object: 'endpoint';
    /**
     * The owner of this endpoint
     */
    owner: string;
    /**
     * Current state of the endpoint
     */
    state: 'PENDING' | 'STARTING' | 'STARTED' | 'STOPPING' | 'STOPPED' | 'ERROR';
    /**
     * The type of endpoint
     */
    type: 'dedicated';
}
export declare namespace EndpointUpdateResponse {
    /**
     * Configuration for automatic scaling of the endpoint
     */
    interface Autoscaling {
        /**
         * The maximum number of replicas to scale up to under load
         */
        max_replicas: number;
        /**
         * The minimum number of replicas to maintain, even when there is no load
         */
        min_replicas: number;
    }
}
export interface EndpointListResponse {
    data: Array<EndpointListResponse.Data>;
    object: 'list';
}
export declare namespace EndpointListResponse {
    /**
     * Details about an endpoint when listed via the list endpoint
     */
    interface Data {
        /**
         * Unique identifier for the endpoint
         */
        id: string;
        /**
         * Timestamp when the endpoint was created
         */
        created_at: string;
        /**
         * The model deployed on this endpoint
         */
        model: string;
        /**
         * System name for the endpoint
         */
        name: string;
        /**
         * The type of object
         */
        object: 'endpoint';
        /**
         * The owner of this endpoint
         */
        owner: string;
        /**
         * Current state of the endpoint
         */
        state: 'PENDING' | 'STARTING' | 'STARTED' | 'STOPPING' | 'STOPPED' | 'ERROR';
        /**
         * The type of endpoint
         */
        type: 'serverless' | 'dedicated';
    }
}
export interface EndpointCreateParams {
    /**
     * Configuration for automatic scaling of the endpoint
     */
    autoscaling: EndpointCreateParams.Autoscaling;
    /**
     * The hardware configuration to use for this endpoint
     */
    hardware: string;
    /**
     * The model to deploy on this endpoint
     */
    model: string;
    /**
     * Whether to disable the prompt cache for this endpoint
     */
    disable_prompt_cache?: boolean;
    /**
     * Whether to disable speculative decoding for this endpoint
     */
    disable_speculative_decoding?: boolean;
    /**
     * A human-readable name for the endpoint
     */
    display_name?: string;
    /**
     * The number of minutes of inactivity after which the endpoint will be
     * automatically stopped. Set to null, omit or set to 0 to disable automatic
     * timeout.
     */
    inactive_timeout?: number | null;
    /**
     * The desired state of the endpoint
     */
    state?: 'STARTED' | 'STOPPED';
}
export declare namespace EndpointCreateParams {
    /**
     * Configuration for automatic scaling of the endpoint
     */
    interface Autoscaling {
        /**
         * The maximum number of replicas to scale up to under load
         */
        max_replicas: number;
        /**
         * The minimum number of replicas to maintain, even when there is no load
         */
        min_replicas: number;
    }
}
export interface EndpointUpdateParams {
    /**
     * New autoscaling configuration for the endpoint
     */
    autoscaling?: EndpointUpdateParams.Autoscaling;
    /**
     * A human-readable name for the endpoint
     */
    display_name?: string;
    /**
     * The number of minutes of inactivity after which the endpoint will be
     * automatically stopped. Set to 0 to disable automatic timeout.
     */
    inactive_timeout?: number | null;
    /**
     * The desired state of the endpoint
     */
    state?: 'STARTED' | 'STOPPED';
}
export declare namespace EndpointUpdateParams {
    /**
     * New autoscaling configuration for the endpoint
     */
    interface Autoscaling {
        /**
         * The maximum number of replicas to scale up to under load
         */
        max_replicas: number;
        /**
         * The minimum number of replicas to maintain, even when there is no load
         */
        min_replicas: number;
    }
}
export interface EndpointListParams {
    /**
     * Filter endpoints by type
     */
    type?: 'dedicated' | 'serverless';
}
export declare namespace Endpoints {
    export { type EndpointCreateResponse as EndpointCreateResponse, type EndpointRetrieveResponse as EndpointRetrieveResponse, type EndpointUpdateResponse as EndpointUpdateResponse, type EndpointListResponse as EndpointListResponse, type EndpointCreateParams as EndpointCreateParams, type EndpointUpdateParams as EndpointUpdateParams, type EndpointListParams as EndpointListParams, };
}
//# sourceMappingURL=endpoints.d.ts.map